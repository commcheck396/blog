I"m^<blockquote>
  <h3 id="本功能利用python语言基于numpy库实现">本功能利用Python语言，基于numpy库实现</h3>
</blockquote>

<h2 id="蒙特卡洛树搜索">蒙特卡洛树搜索</h2>

<p>要利用蒙特卡洛树对对五子棋棋局进行搜索，首先要了解蒙特卡洛树搜索的过程。  <br />
一般来说，蒙特卡洛树的搜索过程分为四步，分别是选择（Selection），扩展（Expansion），仿真（Simulation）和反向传播（Backpropagation），要能让这些操作顺利地运转起来，我们首先需要一个树形数据结构，姑且叫它游戏树。<br />
要实现树形结构，首先要定义节点的数据结构，新建一个节点类型<code class="language-plaintext highlighter-rouge">Class Node</code>，代表一个棋盘格局，其属性分别有:<br />
<code class="language-plaintext highlighter-rouge">board</code>棋盘格局，<br />
<code class="language-plaintext highlighter-rouge">pre_pos</code>最后一次落子的位置，<br />
<code class="language-plaintext highlighter-rouge">parent</code>父节点，<br />
<code class="language-plaintext highlighter-rouge">children</code>所有的子节点，<br />
<code class="language-plaintext highlighter-rouge">not_vistit_pos</code>未访问的结点，<br />
<code class="language-plaintext highlighter-rouge">num_visit</code>该节点被访问的次数，<br />
<code class="language-plaintext highlighter-rouge">num_of_wins</code>该节点仿真过程中黑子和白子的胜利次数，<br />
属性定义以及初始化如下：<br /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">pre_pos</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">board</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">pre_pos</span> <span class="o">=</span> <span class="n">pre_pos</span> 
    <span class="bp">self</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span>  
    <span class="bp">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">not_visit_pos</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">board</span> <span class="o">=</span> <span class="n">board</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">num_of_visit</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="bp">self</span><span class="p">.</span><span class="n">num_of_wins</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>     <span class="c1"># 记录该结点模拟的白子、黑子的胜利次数(defaultdict: 当字典里的key不存在但被查找时，返回0)
</span></code></pre></div></div>

<p><br /></p>

<p>仅有数据结构是远远不够的，还需要定义一套动作来实现这些过程：<br />
<code class="language-plaintext highlighter-rouge">fully_expanded(self)</code>：判断结点是否完全扩展。<br />
<code class="language-plaintext highlighter-rouge">non_terminal(self)</code>：判断结点是否为终端叶子结点，即该节点对应的格局是否已分出胜负。<br />
<code class="language-plaintext highlighter-rouge">pick_univisted(self)</code>：选择一个未访问的结点并将其添加进当前结点的孩子中。<br />
<code class="language-plaintext highlighter-rouge">pick_random(self)</code>：随机选择该节点的一个孩子进行扩展。<br />
<code class="language-plaintext highlighter-rouge">num_of_win(self)</code>：判断该节点的胜负情况，利用一个实数即可代表黑白二子的胜负差值。<br />
<code class="language-plaintext highlighter-rouge">best_uct(self, c_param=1.98)</code>：UCT比较过程，选择当前策略下最优的孩子结点，可调节参数，依据的公式为:<br /></p>
<pre><code class="language-math">\frac{w_i}{n_i} + c \sqrt{\frac{ln t}{n_i}} 

</code></pre>
<pre><code class="language-math">w_{i}代表第i次移动后取胜的次数；

</code></pre>

<pre><code class="language-math">n_i代表第i次移动后仿真的次数；
</code></pre>

<pre><code class="language-math">c为探索参数—理论上等于\sqrt {2}；在实际中通常可凭经验选择；
</code></pre>

<pre><code class="language-math">t代表仿真总次数，等于所有n_i的和。
</code></pre>

<p><br /><br /></p>

<p><em>函数代码附在博客结尾处。</em></p>

<p><br /></p>

<p>接下来就可以基于这些的动作，着手进行蒙特卡洛树搜索的编写了。</p>
<h3 id="选择selection">选择（Selection）</h3>
<p>选择操作，即从根节点R开始，连续向下选择子节点至叶子节点L。利用<code class="language-plaintext highlighter-rouge">best_uct</code>方法，让游戏树向最优的方向扩展，这是蒙特卡洛树搜索的精要所在。 <br /> 
这一步的操作如图所示（箭头代表这一步的操作）：</p>

<p><img src="http://commcheck396.github.io/assets/img/2022_1_20/selection.svg.png" alt="pic from internet" /></p>

<h3 id="扩展expansion">扩展（Expansion）</h3>
<p>扩展操作，即除非任意一方的输赢使得游戏在L结束，否则创建一个或多个子节点并选取其中一个节点C。  <br />
这一步的操作如图所示（箭头代表这一步的操作）：</p>

<p><img src="http://commcheck396.github.io/assets/img/2022_1_20/expansion.svg.png" alt="pic from internet" /></p>

<h3 id="仿真simulation">仿真（Simulation）</h3>
<p>仿真操作，即在从节点C开始，用随机策略进行游戏，又称为playout或者rollout，直至格局达到终盘，游戏结束，产生胜负。<br />
这一步的操作如图所示（箭头代表这一步的操作）：</p>

<p><img src="http://commcheck396.github.io/assets/img/2022_1_20/simulation.svg.png" alt="pic from internet" /></p>

<h3 id="反向传播backpropagation">反向传播（Backpropagation）</h3>
<p>反向传播操作，即使用上一步仿真随机游戏的结果，更新从C到R的路径上的节点信息，更新每个结点的胜负值以及总盘数。<br />
这一步的操作如图所示（箭头代表这一步的操作）：</p>

<p><img src="http://commcheck396.github.io/assets/img/2022_1_20/backpropagation.svg.png" alt="pic from internet" /></p>

<p><em>插图中节点内的内容代表胜利次数/游戏次数，我们将利用这个参数来寻找下一步的最优的行棋位置。</em></p>

<p><br /></p>

<p>根据上述四个步骤，编写函数实现该功能：<br />
<code class="language-plaintext highlighter-rouge">traverse(node)</code>：遍历结点，遇到已完全展开的结点，利用<code class="language-plaintext highlighter-rouge">best_uct</code>选择最佳的孩子节点继续向下遍历。此函数实现选择+拓展过程。<br />
<code class="language-plaintext highlighter-rouge">rollout(node)</code>：仿真过程，不断利用<code class="language-plaintext highlighter-rouge">pick_random()</code>随机选择结点，直至决出胜负，返回胜负值。<br />
<code class="language-plaintext highlighter-rouge">backpropagate(node, result)</code>：反向传播过程，利用<code class="language-plaintext highlighter-rouge">rollout()</code>的结果向上更新节点内容。<br />
<code class="language-plaintext highlighter-rouge">best_child(node)</code>：利用每个节点的参数（胜利次数/游戏次数）来判断哪一个孩子收益最大，并返回这个孩子。<br />
<code class="language-plaintext highlighter-rouge">monte_carlo_tree_search(board, pre_pos)</code>：利用上方功能，实现蒙特卡洛搜索，选出最优落子位置。<br /></p>

<p><br /></p>

<p><em>函数代码附在博客结尾处。</em></p>

<p>至此，我们已经实现了最基础的蒙特卡洛树搜索功能，接下来就是用户交互界面的编写，这一部分已经与算法无关，仅需不断获取用户的落子位置，并针对每一个棋盘格局，假设用户会选择最有利的位置，对模型进行一定次数的训练，针对训练结果让电脑选择最佳的落子位置。  <br />
经初步测试，在6*6棋盘上，每轮经15000次搜索后得到的结果还不错，<del>起码一时半会不会输😂</del>。但在8*8的棋盘上，15000的搜索量就显得有些捉襟见肘，结果不怎么理想。但受限于电脑算力，我也不知道怎么用GPU对这个程序进行运算，再加大搜索量，每次行棋都要等待好长时间，目前就先这样吧，关于用户交互的部分放到下一篇博客吧，<del>有时间就写一个GUI🥱</del>。</p>

<p><em>*图片来自©维基百科</em></p>

<p><br /><br /><br /><br /></p>
<h3 id="参考代码">参考代码：</h3>
<p>结点部分：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fully_expanded</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">not_visit_pos</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>     
        <span class="bp">self</span><span class="p">.</span><span class="n">not_visit_pos</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">.</span><span class="n">get_legal_pos</span><span class="p">()</span>    
    <span class="k">return</span> <span class="bp">True</span> <span class="k">if</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">not_visit_pos</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">children</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">else</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">pick_univisted</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">random_index</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">not_visit_pos</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>    
    <span class="n">move_pos</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">not_visit_pos</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="n">random_index</span><span class="p">)</span>  


    <span class="n">new_board</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="n">move_pos</span><span class="p">)</span>  
    <span class="n">new_node</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">parent</span><span class="o">=</span><span class="bp">self</span><span class="p">,</span> <span class="n">pre_pos</span><span class="o">=</span><span class="n">move_pos</span><span class="p">,</span> <span class="n">board</span><span class="o">=</span><span class="n">new_board</span><span class="p">)</span> 
    <span class="bp">self</span><span class="p">.</span><span class="n">children</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">new_node</span>

<span class="k">def</span> <span class="nf">pick_random</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">possible_moves</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">.</span><span class="n">get_legal_pos</span><span class="p">()</span>  
    <span class="n">random_index</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">possible_moves</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>   
    <span class="n">move_pos</span> <span class="o">=</span> <span class="n">possible_moves</span><span class="p">[</span><span class="n">random_index</span><span class="p">]</span>

    <span class="n">new_board</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="n">move_pos</span><span class="p">)</span>
    <span class="n">new_node</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">parent</span><span class="o">=</span><span class="bp">self</span><span class="p">,</span> <span class="n">pre_pos</span><span class="o">=</span><span class="n">move_pos</span><span class="p">,</span> <span class="n">board</span><span class="o">=</span><span class="n">new_board</span><span class="p">)</span>  
    <span class="k">return</span> <span class="n">new_node</span>

<span class="k">def</span> <span class="nf">non_terminal</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">game_result</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">.</span><span class="n">game_over</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">pre_pos</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">game_result</span>

<span class="k">def</span> <span class="nf">num_of_win</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">wins</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">num_of_wins</span><span class="p">[</span><span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">.</span><span class="n">cur_player</span><span class="p">]</span> 
    <span class="n">loses</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">num_of_wins</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">.</span><span class="n">cur_player</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">wins</span> <span class="o">-</span> <span class="n">loses</span>

<span class="k">def</span> <span class="nf">best_uct</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">c_param</span><span class="o">=</span><span class="mf">1.98</span><span class="p">):</span>
    <span class="n">uct_of_children</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="nb">list</span><span class="p">([</span>
        <span class="p">(</span><span class="n">child</span><span class="p">.</span><span class="n">num_of_win</span><span class="p">()</span> <span class="o">/</span> <span class="n">child</span><span class="p">.</span><span class="n">num_of_visit</span><span class="p">)</span> <span class="o">+</span> <span class="n">c_param</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">num_of_visit</span><span class="p">)</span> <span class="o">/</span> <span class="n">child</span><span class="p">.</span><span class="n">num_of_visit</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">children</span>
    <span class="p">]))</span>
    <span class="n">best_index</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">uct_of_children</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">best_index</span><span class="p">]</span>
</code></pre></div></div>

<p>蒙特卡洛树搜索部分：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">monte_carlo_tree_search</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">pre_pos</span><span class="p">):</span>
    <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">board</span><span class="o">=</span><span class="n">board</span><span class="p">,</span> <span class="n">pre_pos</span><span class="o">=</span><span class="n">pre_pos</span><span class="p">)</span>  
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">mcts_times</span><span class="p">):</span>  
        <span class="n">leaf</span> <span class="o">=</span> <span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">)</span> 
        <span class="n">simulation_result</span> <span class="o">=</span> <span class="n">rollout</span><span class="p">(</span><span class="n">leaf</span><span class="p">)</span> 
        <span class="n">backpropagate</span><span class="p">(</span><span class="n">leaf</span><span class="p">,</span> <span class="n">simulation_result</span><span class="p">)</span>  
    <span class="k">return</span> <span class="n">best_child</span><span class="p">(</span><span class="n">root</span><span class="p">).</span><span class="n">pre_pos</span>


<span class="k">def</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="k">while</span> <span class="n">node</span><span class="p">.</span><span class="n">fully_expanded</span><span class="p">():</span>  
        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">best_uct</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">non_terminal</span><span class="p">()</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>    
        <span class="k">return</span> <span class="n">node</span>
    <span class="k">else</span><span class="p">:</span>    
        <span class="k">return</span> <span class="n">node</span><span class="p">.</span><span class="n">pick_univisted</span><span class="p">()</span>   


<span class="k">def</span> <span class="nf">rollout</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">game_result</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">non_terminal</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">game_result</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>  
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">pick_random</span><span class="p">()</span> 
        <span class="k">else</span><span class="p">:</span> 
            <span class="k">break</span>
    <span class="k">if</span> <span class="n">game_result</span> <span class="o">==</span> <span class="s">'win'</span> <span class="ow">and</span> <span class="o">-</span><span class="n">node</span><span class="p">.</span><span class="n">board</span><span class="p">.</span><span class="n">cur_player</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> 
        <span class="k">return</span> <span class="mi">1</span>     
    <span class="k">elif</span> <span class="n">game_result</span> <span class="o">==</span> <span class="s">'win'</span><span class="p">:</span>    
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>   
    <span class="k">else</span><span class="p">:</span> 
        <span class="k">return</span> <span class="mi">0</span>


<span class="k">def</span> <span class="nf">backpropagate</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
    <span class="n">node</span><span class="p">.</span><span class="n">num_of_visit</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">node</span><span class="p">.</span><span class="n">num_of_wins</span><span class="p">[</span><span class="n">result</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">parent</span><span class="p">:</span> 
        <span class="n">backpropagate</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">parent</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">best_child</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="n">visit_num_of_children</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="nb">list</span><span class="p">([</span><span class="n">child</span><span class="p">.</span><span class="n">num_of_visit</span> <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">]))</span>
    <span class="n">best_index</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">visit_num_of_children</span><span class="p">)</span>
    <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">best_index</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">node</span>

</code></pre></div></div>
:ET